1. Le useFetch personnalisÃ©
Câ€™est un petit outil magique quâ€™on crÃ©e pour aller chercher des donnÃ©es sur Internet (ou dans un fichier), comme si on lisait une histoire dans un livre.

javascript
Copier le code
import { useState, useEffect } from "react"; 
// On prend des outils de React : useState (pour se souvenir des choses) et useEffect (pour faire quelque chose aprÃ¨s).

export const useFetch = (url) => { 
  // On fait une fonction qui s'appelle `useFetch`, et elle a besoin d'une adresse (lÃ  oÃ¹ se trouvent les infos).
  const [data, setData] = useState(null); 
  // On prÃ©pare une boÃ®te vide pour ranger les infos quâ€™on va chercher.
  const [isLoading, setIsLoading] = useState(true); 
  // On prÃ©pare un Ã©tat qui dit : "Je suis en train de chercher, attends un peu !"
  const [error, setError] = useState(null); 
  // Une autre boÃ®te pour dire sâ€™il y a un problÃ¨me (par exemple, si on ne trouve pas le livre).

  useEffect(() => { 
    // On dit : "HÃ©, fais Ã§a quand la page sâ€™affiche".
    const fetchData = async () => { 
      // Une mission spÃ©ciale (async) pour aller chercher des infos.
      try { 
        // On essaye de lire les infos.
        const response = await fetch(url); 
        // On va chercher Ã  lâ€™adresse donnÃ©e.
        if (!response.ok) { 
          // Si le livre est cassÃ© (mauvaise rÃ©ponse)â€¦
          throw new Error("Erreur lors de la rÃ©cupÃ©ration des donnÃ©es");
          // On lance une alerte (une erreur).
        }
        const result = await response.json(); 
        // Si tout va bien, on transforme le livre en infos comprÃ©hensibles (JSON).
        setData(result); 
        // Et on range les infos dans notre boÃ®te.
      } catch (err) { 
        // Si on nâ€™arrive pas Ã  lire le livreâ€¦
        setError(err.message); 
        // On met le problÃ¨me dans la boÃ®te des erreurs.
      } finally { 
        // Ã€ la fin, quâ€™il y ait un problÃ¨me ou pas...
        setIsLoading(false); 
        // On dit : "Câ€™est bon, jâ€™ai fini de chercher !"
      }
    };

    fetchData(); 
    // On commence la mission.
  }, [url]); 
  // On fait Ã§a chaque fois que lâ€™adresse change.

  return { data, isLoading, error }; 
  // On renvoie nos boÃ®tes (les infos, si on cherche encore ou sâ€™il y a un problÃ¨me).
};
2. La page principale (Home)
Câ€™est la maison oÃ¹ toutes les cartes sâ€™affichent. Dâ€™abord 6, puis on peut en demander plus.

javascript
Copier le code
import React, { useState } from "react"; 
// On importe React et useState (pour se souvenir du nombre de cartes quâ€™on montre).
import { useFetch } from "../../utils/useFetch"; 
// On utilise notre outil magique pour chercher les infos.
import { Link } from "react-router-dom"; 
// Pour permettre de cliquer sur une carte et aller Ã  une autre page.
import Loader from "../Loader/Loader"; 
// Un joli chargement pendant quâ€™on attend les infos.
import "./Home.scss"; 
// On rend la maison jolie grÃ¢ce Ã  des couleurs et styles.

const Home = () => { 
  // On fait une nouvelle maison (Home).
  const { data: cards, isLoading, error } = useFetch("/data.json"); 
  // On utilise notre outil pour lire les infos du fichier data.json.
  const [numCardsToShow, setNumCardsToShow] = useState(6); 
  // On commence par montrer seulement 6 cartes.

  const showMoreCards = () => { 
    // Une fonction pour montrer plus de cartes.
    setNumCardsToShow((prev) => prev + 6); 
    // On dit : "Ajoute 6 cartes de plus".
  };

  if (isLoading) return <Loader />; 
  // Si on est encore en train de chercher, on montre un joli message.
  if (error) return <div>Erreur : {error}</div>; 
  // Sâ€™il y a un problÃ¨me, on le dit simplement.

  return (
    <section className="home"> 
      {/* Câ€™est le grand cadre oÃ¹ on met tout. */}
      <h1>Liste des logements</h1> 
      {/* Un titre pour dire ce quâ€™on voit. */}
      <div className="home__grid"> 
        {/* Une grille pour ranger toutes les cartes. */}
        {cards.slice(0, numCardsToShow).map(({ id, title, cover }) => (
          // On prend les 6 premiÃ¨res cartes (ou plus si on a cliquÃ© sur "Afficher plus").
          <Link to={`/housing/${id}`} key={id} className="card"> 
            {/* Chaque carte est un lien vers sa propre page. */}
            <img src={cover} alt={title} className="card__image" /> 
            {/* Lâ€™image de la carte. */}
            <h2 className="card__title">{title}</h2> 
            {/* Le titre de la carte. */}
          </Link>
        ))}
      </div>
      {numCardsToShow < cards.length && ( 
        // Si on nâ€™a pas encore montrÃ© toutes les cartes...
        <button className="home__button" onClick={showMoreCards}> 
          {/* Un bouton pour demander Ã  en voir plus. */}
          Afficher plus
        </button>
      )}
    </section>
  );
};

export default Home; 
// On finit la maison et on la montre au monde.
3. Les pages individuelles (HousingPage)
Câ€™est comme si on ouvrait une carte pour voir tout ce quâ€™elle contient.

javascript
Copier le code
import React from "react"; 
// On utilise React pour faire cette page.
import { useParams, useNavigate } from "react-router-dom"; 
// On regarde quel numÃ©ro de carte (id) est dans lâ€™adresse.
import { useFetch } from "../../utils/useFetch"; 
// On utilise encore notre outil pour chercher les infos.
import Loader from "../Loader/Loader"; 
// Encore un joli chargement.
import "./HousingPage.scss"; 
// On rend cette page jolie.

const HousingPage = () => { 
  const { id } = useParams(); 
  // On rÃ©cupÃ¨re lâ€™id de la carte dans lâ€™adresse (comme "housing/1").
  const { data: cards, isLoading, error } = useFetch("/data.json"); 
  // On rÃ©cupÃ¨re toutes les cartes.
  const navigate = useNavigate(); 
  // On prÃ©pare Ã  rediriger si besoin.

  if (isLoading) return <Loader />; 
  // Si on cherche encore, on attend.
  if (error) return <div>Erreur : {error}</div>; 
  // Si on a un problÃ¨me, on le dit.

  const housing = cards.find((card) => card.id === id); 
  // On cherche la carte qui a exactement le bon id.

  if (!housing) { 
    // Si on ne trouve pas cette carte...
    navigate("/404"); 
    // On envoie lâ€™utilisateur sur une page 404 (erreur).
    return null; 
    // On arrÃªte tout ici.
  }

  const { title, description, pictures, host, rating, location, equipments, tags } = housing; 
  // On prend toutes les infos de cette carte.

  return (
    <div className="housing"> 
      <h1>{title}</h1> 
      {/* On montre le titre. */}
      <p>{description}</p> 
      {/* Et la description. */}
      <p>Location : {location}</p> 
      {/* Lâ€™endroit. */}
      <p>Ã‰quipements : {equipments.join(", ")}</p> 
      {/* Ce quâ€™il y a dans la maison. */}
      <p>Tags : {tags.join(", ")}</p> 
      {/* Les petits mots-clÃ©s. */}
      <p>Note : {rating}/5</p> 
      {/* La note donnÃ©e par les gens. */}
    </div>
  );
};

export default HousingPage; 
// On finit cette page et on la montre.
4. La page dâ€™erreur 404
Câ€™est une page pour dire : "Oups, on ne trouve pas ce que tu cherches !"

javascript
Copier le code
import React from "react"; 
// On utilise React.
import { Link } from "react-router-dom"; 
// On ajoute un lien pour retourner Ã  la maison.
import "./Error404.scss"; 
// On la rend jolie.

const Error404 = () => { 
  return (
    <div className="error404"> 
      <h1>404</h1> 
      {/* Un gros "404" pour dire quâ€™on ne trouve rien. */}
      <p>Oups, la page que vous recherchez n'existe pas.</p> 
      {/* Un petit message dâ€™excuse. */}
      <Link to="/" className="error404__link"> 
        {/* Un bouton pour revenir Ã  la maison. */}
        Retour Ã  l'accueil
      </Link>
    </div>
  );
};

export default Error404; 
// On finit cette page.
5. Les routes
Câ€™est comme une carte qui dit oÃ¹ aller dans notre site.

javascript
Copier le code
import React from "react"; 
// On utilise React.
import { BrowserRouter as Router, Routes, Route } from "react-router-dom"; 
// On fait des routes pour notre site.
import Home from "./components/Home/Home"; 
// La maison principale.
import HousingPage from "./components/HousingPage/HousingPage"; 
// Les pages des cartes.
import Error404 from "./components/Error404/Error404"; 
// La page dâ€™erreur.

const App = () => { 
  return (
    <Router> 
      {/* On met toutes les routes dans un "router". */}
      <Routes> 
        {/* On dÃ©finit les chemins (routes). */}
        <Route path="/" element={<Home />} /> 
        {/* La route "/" va Ã  la maison. */}
        <Route path="/housing/:id" element={<HousingPage />} /> 
        {/* La route "/housing/:id" va aux pages des cartes. */}
        <Route path="*" element={<Error404 />} /> 
        {/* Si rien ne marche, on va Ã  la page 404. */}
      </Routes>
    </Router>
  );
};

export default App; 
// On finit notre plan de route.
ðŸŽ‰ Et voilÃ  ! Tu as une maison avec des cartes, des pages individuelles pour chaque carte, et une jolie page dâ€™erreur si quelque chose ne va pas !






